const fs = require("fs");
const path = require("path");
const location = "./html/classHandler/";
/**
 * Generates a supplement file for the given className and config.
 * @param {string} className - The class name for the function and file.
 * @param {Object} config - Configuration object containing base, derived, and fieldsToAdd.
 */
function generateSupplementFile(config) {
	const { object, type, jsLibrary, creatorParam, fieldsToAdd,repository } = config;
	const className = object;
	const fileName = `supplement${className}.js`;
	const creatorParamStringified = JSON.stringify(creatorParam);
console.log("******************* ",)
console.log("object",object)
console.log("type",type)
console.log("jsLibrary",jsLibrary)
console.log("creatorParam",creatorParam)
console.log("fieldsToAdd",fieldsToAdd)
console.log("repository",repository)
	// Generate arrayOfItems content from fieldsToAdd
	const arrayOfItems = fieldsToAdd
		.map((field) => {
			/*
			{
             "dataPropertyName": "jsonSpectrum",
             "label": "NMR file (.json)",
             "type": "file",
             "validationFileString1000": "https://mestrelab.com/json-schemas/mnova/2023-07/01/nmr/spec"
           }
		   */
		  if (field.type == "file") {
			return `{
						type: "file",
						htmlID: "${field.dataPropertyName}",
						comment: "${field.label}",
						show: true
					}`;
		  } else {
			return `{
						type: "baseType",
						htmlID: "${field.dataPropertyName}",
						baseType: "${field.baseType}",
						comment: "${field.label}",
						defaultValue: ${field.defaultValue},
						randomFrom: ${field.randomFrom},
						randomTo: ${field.randomTo},
						show: true
					}`;
		  }
			
		})
		.join(",\n");

	// Generate field handling loop
	const fieldLoop = fieldsToAdd
		.map((field) => {
			console.log("fsfs");
			return `
	const ${field.dataPropertyName} = this.#getValOrDefault(dataObj, "${field.dataPropertyName}");
	if (${field.dataPropertyName} !== undefined) sourceObj["${field.dataPropertyName}"] = ${field.dataPropertyName};`;
		})
		.join("\n");


	// Template for the function
	const content = `
import { ${className} } from 'html/src_objects/${className}.js';
// generated by makeFormForReaders.js
// include..... repository: ${repository}
// include..... jsLibrary: ${jsLibrary}
// work on object:${object} (object == className)
// Auto-generated supplement file for className:${className}
${className}_DataEnrichment(targetObjType, dataObj = {}) {
	const myName = "${className}_DataEnrichment"; // don't automatize in case 'use strict'
	if (targetObjType == "info") {
			return {
				targetObjType: "${className}",
				uniqueHTMLcode: myName,
				elevatorMethod: myName,
				arrayOfItems: [
					${arrayOfItems}
				],
			};
	}

	var sourceObj = {
		$schema: \`https://chemedata.github.io/schema/v1/schema/\${targetObjType}.json\`,
	};

	// Handle fields dynamically
	${fieldLoop}
	// TAKE CARE OF ORIGIN
	sourceObj["origin"] = {};///// TO DO

	const creatorParam = '${creatorParamStringified}'; 
	// here create object, call converter...

	const the${object} = new ${object}(creatorParam, sourceObj);

	const targetObj = the${object}.obj; // ???

	const encodedContent = JSON.stringify(content);
	const linkUrl = \`https://chemedata.github.io/schema/html/\${targetObjType}.html#data=\${encodedContent}\`;

	document.getElementById(\`mergeOutput\${dataObj.uniqueHTMLcode}\`).textContent = JSON.stringify(targetObj, null, 2);
	window.open(linkUrl, "_blank");
}

//module.exports = ${className}_DataEnrichment;
`;

	// Write the file
	fs.writeFileSync(path.join(location, fileName), content, "utf8");
	console.log(`âœ… File ${fileName} created successfully.`);
}

async function downloadFile(url, output) {
  const response = await fetch(url);
  if (!response.ok) throw new Error(`Failed to fetch ${url}: ${response.statusText}`);
  
  const data = await response.text();
  fs.writeFileSync(output, data, "utf8");
  console.log(`File saved to ${output}`);
}


const derivationsFile = path.join("all_viewers.json");
const data = JSON.parse(fs.readFileSync(derivationsFile, "utf8"));

const result = [];

data.list.forEach((item) => {
	item.listObject.forEach((innerItem) => {
		const input = {
			object: innerItem.object,
			type: innerItem.type,
			fieldsToAdd: innerItem.requiredInput,
			jsLibrary: item.jsLibrary,
			creatorParam: item.creatorParam,
			repository: item.repository
		};
//	wget -O ./html/src_objects/nmrSpectrumObject.js https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/nmrSpectrumObject.js
//	wget -O ./html/src_objects/jGraphObject.js https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/jGraphObject.js
					//https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/JgraphObject.js
					//https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/jGraphObject.js
		        	//https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/nmrSpectrumObject.js

					//https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/JgraphObject.js
					//					https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/NMRspectrumObject.js
		const url =  `https://raw.githubusercontent.com/chemedata/nmr-objects/main/src/${innerItem.object}.js`;
		const output = `html/src_objects/${innerItem.object}.js`;

		downloadFile(url, output).catch(console.error);
		result.push(input);
		generateSupplementFile(input);
	});
});

console.log(result);





