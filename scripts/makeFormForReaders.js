import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

// __dirname replacement in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const location = "./html/classHandler/";

/**
 * Generates a supplement file for the given className and config.
 * @param {string} className - The class name for the function and file.
 * @param {Object} config - Configuration object containing base, derived, and fieldsToAdd.
 */
function generateSupplementFile(config) {
	const { object, objectObj, type, jsLibrary, creatorParam, fieldsToAdd, repository } = config;
	const className = object;
	const fileName = `supplement${className}.js`;
	const creatorParamStringified = JSON.stringify(creatorParam);
	console.log("******************* ");
	console.log("object", object);
	console.log("type", type);
	console.log("jsLibrary", jsLibrary);
	console.log("creatorParam", creatorParam);
	console.log("fieldsToAdd", fieldsToAdd);
	console.log("repository", repository);

	// Generate arrayOfItems content from fieldsToAdd
	const arrayOfItems = fieldsToAdd
		.map((field) => {
			/*
			{
             "dataPropertyName": "jsonSpectrum",
             "label": "NMR file (.json)",
             "type": "file",
             "validationFileString1000": "https://mestrelab.com/json-schemas/mnova/2023-07/01/nmr/spec"
           }
		   */
			if (field.type == "file") {
				return `{
					type: "file",
					htmlID: "${field.dataPropertyName}",
					comment: "${field.label}",
					show: true
				}`;
			} else {
				return `{
					type: "baseType",
					htmlID: "${field.dataPropertyName}",
					baseType: "${field.baseType}",
					comment: "${field.label}",
					defaultValue: ${field.defaultValue},
					randomFrom: ${field.randomFrom},
					randomTo: ${field.randomTo},
					show: true
				}`;
			}
		})
		.join(",\n");

	// Generate field handling loop
	const fieldLoop = fieldsToAdd
		.map((field) => {
			console.log("fsfs");
			return `
	const ${field.dataPropertyName} = this.#getValOrDefault(dataObj, "${field.dataPropertyName}");
	if (${field.dataPropertyName} !== undefined) sourceObj["${field.dataPropertyName}"] = ${field.dataPropertyName};`;
		})
		.join("\n");

	// Template for the function
	const content = `
// generated by makeFormForReaders.js
// include..... repository: ${repository}
// include..... jsLibrary: ${jsLibrary}
// work on object:${object} (object == className)
// Auto-generated supplement file for className:${className}
${className}_DataEnrichment(targetObjType, dataObj = {}) {
	const myName = "${className}_DataEnrichment"; // don't automatize in case 'use strict'
	if (targetObjType == "info") {
		return {
			targetObjType: "${className}",
			uniqueHTMLcode: myName,
			elevatorMethod: myName,
			arrayOfItems: [
				${arrayOfItems}
			],
		};
	}

	var sourceObj = {};

	// Handle fields dynamically
	${fieldLoop}
	
	// optional escape sourceObj
	if ( 
		(sourceObj && Object.keys(sourceObj).length === 0)
					// tests input1 as field.dataPropertyName above test
					//!document.getElementById(\`input1\${dataObj.uniqueHTMLcode}\`).dataset
					//	.content
	) {
		const errorMessage = "Failed because of missing input1";
		document.getElementById(
			\`mergeOutput\${dataObj.uniqueHTMLcode}\`
		).textContent = errorMessage;
		return;
	}

	sourceObj["$schema"] = \`https://chemedata.github.io/schema/v1/schema/\${targetObjType}.json\`;
	// TAKE CARE OF ORIGIN
	sourceObj["origin"] = {};///// TO DO

	const creatorParam = {creatorParam:${creatorParamStringified}}; 
	// here create object, call converter...

	const the${object} = new ${objectObj}(creatorParam, sourceObj);
	console.log("3333")
	console.log("5555")

	const targetData = the${object}.data;

	if ( 
		(targetData && Object.keys(targetData).length === 0)
	) {
		const errorMessage = "targetData is empty";
		document.getElementById(
			\`mergeOutput\${dataObj.uniqueHTMLcode}\`
		).textContent = errorMessage;
		return;
	}

	const encodedContent = JSON.stringify(targetData);
	const linkUrl = \`https://chemedata.github.io/schema/html/\${targetData}.html#data=\${encodedContent}\`;

	//This dumps the json in the cell / may be too long
	//document.getElementById(\`mergeOutput\${dataObj.uniqueHTMLcode}\`).textContent = JSON.stringify(targetData, null, 2);
linkUrl

	console.log("linkUrl.length",linkUrl.length)
	console.log("Valid URL?", /^[\x20-\x7E]+$/.test(linkUrl));
	if (linkUrl.length > 1000) {
	    const storageKey = \`data_\${Date.now()}_\${Math.floor(Math.random() * 1e6)}\`;
	    localStorage.setItem(storageKey, JSON.stringify(targetData));
	    const linkUrlShort = \`https://chemedata.github.io/schema/html/\${encodeURIComponent(targetObjType)}.html#storageKey=\${storageKey}\`;
		console.log("localStorage linkUrlShort.length",linkUrlShort.length)
		console.log("Valid localStorage URL?", /^[\x20-\x7E]+$/.test(linkUrlShort));
		window.open(linkUrlShort, "_blank");
	} else {
		window.open(linkUrl, "_blank");
	}
}
`;

	// Write the file
	fs.writeFileSync(path.join(location, fileName), content, "utf8");
	console.log(`âœ… File ${fileName} created successfully.`);
}

// ES module fetch wrapper
async function downloadFile(url, output) {
	const response = await fetch(url);
	if (!response.ok) throw new Error(`Failed to fetch ${url}: ${response.statusText}`);

	const data = await response.text();
	fs.writeFileSync(output, data, "utf8");
	console.log(`File saved to ${output}`);
}

// Load derivations
const derivationsFile = path.join(__dirname, "../all_viewers.json");
const data = JSON.parse(fs.readFileSync(derivationsFile, "utf8"));

const result = [];

data.list.forEach((item) => {
	item.listObject.forEach((innerItem) => {
		const input = {
			object: innerItem.object,
			objectObj: innerItem.objectObj,
			type: innerItem.type,
			fieldsToAdd: innerItem.requiredInput,
			jsLibrary: item.jsLibrary,
			creatorParam: item.creatorParam,
			repository: item.repository
		};

		const url = `https://raw.githubusercontent.com/chemedata/nmr-objects/main/dist/${innerItem.object}.js`;
		const output = path.join(__dirname, `../html/src_objects/${innerItem.object}.js`);

		downloadFile(url, output).catch(console.error);
		result.push(input);
		generateSupplementFile(input);
	});
});

console.log(result);
