import fs from "fs";
import path from "path";
import { all_toolsFile, classHandlerDir, classHandlerSupFiles } from "../scripts/config.js";

/**
 * Generates a supplement file for the given className and config.
 * @param {string} className - The class name for the function and file.
 * @param {Object} config - Configuration object containing base, derived, and fieldsToAdd.
 */
function generateSupplementFileImporter(config) {
	const {
		object,
		objectObj,
		type,
		jsLibrary,
		creatorParam,
		fieldsToAdd,
		repository,
	} = config;
	const className = object;
	const fileName = `supplement${className}.js`;
	const creatorParamStringified = JSON.stringify(creatorParam);
	console.log("******************* ");
	console.log("object", object);
	console.log("type", type);
	console.log("jsLibrary", jsLibrary);
	console.log("creatorParam", creatorParam);
	console.log("fieldsToAdd", fieldsToAdd);
	console.log("repository", repository);

	// Generate arrayOfItems content from fieldsToAdd
	const arrayOfItems = fieldsToAdd
		.map((field) => {
			/*
			{
             "dataPropertyName": "jsonSpectrum",
             "label": "NMR file (.json)",
             "type": "file",
             "validationFileString1000": "https://mestrelab.com/json-schemas/mnova/2023-07/01/nmr/spec"
           }
		   */
			if (field.type == "file") {
				return `{
					type: "file",
					htmlID: "${field.dataPropertyName}",
					comment: "${field.label}",
					show: true
				}`;
			} else {
				return `{
					type: "baseType",
					htmlID: "${field.dataPropertyName}",
					baseType: "${field.baseType}",
					comment: "${field.label}",
					defaultValue: ${field.defaultValue},
					randomFrom: ${field.randomFrom},
					randomTo: ${field.randomTo},
					show: true
				}`;
			}
		})
		.join(",\n");

	// Generate field handling loop
	const fieldLoop = fieldsToAdd
		.map((field) => {
			return `
	const ${field.dataPropertyName} = this.#getValOrDefault(dataObj, "${field.dataPropertyName}");
	if (${field.dataPropertyName} !== undefined) sourceObj["${field.dataPropertyName}"] = ${field.dataPropertyName};`;
		})
		.join("\n");

	// Template for the function
	const content = `
// generated by makeFormForReaders.js
// include..... repository: ${repository}
// include..... jsLibrary: ${jsLibrary}
// work on object:${object} (object == className)
// Auto-generated supplement file for className:${className}
${className}_DataEnrichment(targetObjType, dataObj = {}) {
	const myName = "${className}_DataEnrichment"; // don't automatize in case 'use strict'
	if (targetObjType == "info") {
		return {
			targetObjType: "${className}",
			uniqueHTMLcode: myName,
			elevatorMethod: myName,
			arrayOfItems: [
				${arrayOfItems}
			],
		};
	}

	var sourceObj = {};

	// Handle fields dynamically
	${fieldLoop}
	
	// optional escape sourceObj
	if ( 
		(sourceObj && Object.keys(sourceObj).length === 0)
					// tests input1 as field.dataPropertyName above test
					//!document.getElementById(\`input1\${dataObj.uniqueHTMLcode}\`).dataset
					//	.content
	) {
		const errorMessage = "Failed because of missing input1";
		document.getElementById(
			\`mergeOutput\${dataObj.uniqueHTMLcode}\`
		).textContent = errorMessage;
		return;
	}

	sourceObj["$schema"] = \`https://chemedata.github.io/schema/v1/schema/\${targetObjType}.json\`;
	// TAKE CARE OF ORIGIN
	sourceObj["origin"] = {};///// TO DO

	const creatorParam = {creatorParam:${creatorParamStringified}}; 
	// here create object, call converter...

	const the${object} = new ${objectObj}(creatorParam, sourceObj);
	console.log("3333")
	console.log("5555")

	const targetData = {content :the${object}.data};

	if ( 
		(targetData && Object.keys(targetData).length === 0)
	) {
		const errorMessage = "targetData is empty";
		document.getElementById(
			\`mergeOutput\${dataObj.uniqueHTMLcode}\`
		).textContent = errorMessage;
		return;
	}

	const encodedContent = JSON.stringify(targetData);
	const linkUrl = \`https://chemedata.github.io/schema/html/\${targetData}.html#data=\${encodedContent}\`;

	//This dumps the json in the cell / may be too long
	//document.getElementById(\`mergeOutput\${dataObj.uniqueHTMLcode}\`).textContent = JSON.stringify(targetData, null, 2);

	console.log("linkUrl.length",linkUrl.length)
	console.log("Valid URL?", /^[\x20-\x7E]+$/.test(linkUrl));
	if (linkUrl.length > 1000) {
		localStorage.clear();
	    const storageKey = \`data_\${Date.now()}_\${Math.floor(Math.random() * 1e6)}\`;
	    localStorage.setItem(storageKey, JSON.stringify(targetData));
	    const linkUrlShort = \`https://chemedata.github.io/schema/html/\${encodeURIComponent(targetObjType)}.html#storageKey=\${storageKey}\`;
		console.log("localStorage linkUrlShort.length",linkUrlShort.length)
		console.log("Valid localStorage URL?", /^[\x20-\x7E]+$/.test(linkUrlShort));
		window.open(linkUrlShort, "_blank");
	} else {
		window.open(linkUrl, "_blank");
	}
}
`;

	// Write the file
	fs.writeFileSync(path.join(classHandlerDir, fileName), content, "utf8");
	console.log(`✅ File ${fileName} created successfully.`);
}

function generateSupplementFileViewer(config) {
	const {
		object,
		type,
		jsLibraryView,
		jsLibrary,
		repository,
		fieldsToAdd,
		fileNameViewerUSELESSMAXBE_REDUNDANT,
		listObjectSchema,
		fileNameAsSavedHere
	} = config;
	//const className = object;
	//const fileName = `supplement${className}.js`;
	//const creatorParamStringified = JSON.stringify(creatorParam);
	console.log("******************* >>>");
	console.log("object", object);
	console.log("type", type);
	//console.log("jsLibraryView", jsLibraryView);
	//console.log("fileNameViewerUSELESSMAXBE_REDUNDANT", fileNameViewerUSELESSMAXBE_REDUNDANT);
	//console.log("fieldsToAdd", fieldsToAdd);
	console.log("repository", repository);
	console.log("listObjectSchema", listObjectSchema);
	console.log("******************* >>>IIIIIIII fileNameAsSavedHere:",fileNameAsSavedHere);
	for (const curtObjSchema of listObjectSchema) {
		console.log("******************* ====", object, "for", curtObjSchema);
		var includeFile = "";
		for (const item of jsLibraryView) {
			if (item.include) {
				includeFile += `import { ${item.include} } from \"${fileNameAsSavedHere}/${path.basename(item.fileName)}\";\n`
				console.log(`prepare: import { ${item.include} } from \"${fileNameAsSavedHere}/${path.basename(item.fileName)}\";`);
			} 
		}
	//         
		const content = `
	${curtObjSchema}_AdditionalViewer() {
		const objClassName = "${curtObjSchema}";
		const myName = \`\${objClassName}_AdditionalViewer\`; // function name don't use js feature in case 'use strict'

		// NSKEA DATA location of automatically inserted code

		// NSKEA start
		function callGenerationGraphic(myName, viewerDataPassed) {
			const frame = document.createElement("div");
			frame.id = myName;
			frame.className = "frame red-frame";
			const container = document.getElementById("dynamicContent");
			container.appendChild(frame);
			// const svg = d3.select("#" + myName).append("svg").attr("width", 200).attr("height", 100);
			const svg = d3.select("#" + myName)
				.append("svg")
				.attr("viewBox", "0 0 890 490")
				.attr("width", 890)
				.attr("height", 490)
				.style("display", "block")
				.append("g")
				.attr("transform", "translate(60,10)");

			var the${object} = new ${object}(viewerDataPassed, svg);
		}
		// NSKEA end
		const viewerDataPassed = ${object}.getProperDataForVisualization(this, objClassName);
		callGenerationGraphic(myName, viewerDataPassed);
	}
`
		const fileNameMethod = "suppl_"+ curtObjSchema + "_method.js";
		fs.writeFileSync(path.join(classHandlerSupFiles, fileNameMethod), content, "utf8");

		const fileNameInclude = "suppl_"+ curtObjSchema + "_import.js";
		fs.writeFileSync(path.join(classHandlerSupFiles, fileNameInclude), includeFile, "utf8");

		console.log(`✅ Files for ${curtObjSchema} created successfully.`);
	}
}


// ES module fetch wrapper
async function downloadFile(url, output) {
	const response = await fetch(url);
	if (!response.ok)
		throw new Error(`Failed to fetch ${url}: ${response.statusText}`);

	const data = await response.text();
	fs.writeFileSync(output, data, "utf8");
	console.log(`...async File saved to ${output}`);
}

export function mainMakeForm() {
	// Load derivations
	const data = JSON.parse(fs.readFileSync(all_toolsFile, "utf8"));

	const result = [];

	data.list.forEach((item) => {
		item.listObject.forEach((innerItem) => {
			if (innerItem.type === "import") {
				const input = {
					// innerItem
					object: innerItem.object,
					objectObj: innerItem.objectObj,
					type: innerItem.type,
					fieldsToAdd: innerItem.requiredInput,
					// item
					jsLibrary: item.jsLibrary,
					creatorParam: item.creatorParam,
					repository: item.repository,
				};
				const url = `https://raw.githubusercontent.com/chemedata/nmr-objects/main/dist/${innerItem.object}.js`;
				const output = path.join(`./html/src_objects/${innerItem.object}.js`);
				console.log(`<<<✅ makeFormForReader : Getting (from nmr-objects) ${innerItem.object}.js`)
				downloadFile(url, output).catch(console.error);
				generateSupplementFileImporter(input);
				result.push(input);
			}		
			if (innerItem.type === "export") {
				const input = {
					// innerItem
					object: innerItem.object,
					objectObj: innerItem.objectObj,
					type: innerItem.type,
					outputComponents: innerItem.outputComponents,
					// item
					jsLibrary: item.jsLibrary,
					creatorParam: item.creatorParam,
					repository: item.repository,
				};

				const url = `https://raw.githubusercontent.com/chemedata/nmr-objects/main/dist/${innerItem.object}.js`;
				const outputDEL = path.join("./html/src_objects", `${innerItem.object}.js`);
				const output = path.join("html", "src_objects", `${innerItem.object}.js`);
				console.log(`>>>✅ makeFormForWriter : Getting (from nmr-objects) ${innerItem.object}.js`)
				downloadFile(url, output).catch(console.error);
				//generateSupplementFileExporter(input);
				//result.push(input);
			}
			if (innerItem.type === "viewer") {
				console.log(`=== For ${innerItem.object}.js`)
				const input = {
					// innerItem
					object: innerItem.object,
					type: innerItem.type,
					repository: innerItem.repository,
					fileNameViewerUSELESSMAXBE_REDUNDANT: innerItem.fileNameViewerUSELESSMAXBE_REDUNDANT,
					listObjectSchema: innerItem.listObjectSchema,
					jsLibraryView: innerItem.jsLibraryView,
					// item
					jsLibrary: item.jsLibrary,
					creatorParam: item.creatorParam,
					repository: item.repository,
				};
				const target = "html/src_objects"
				innerItem.fileNameAsSavedHere = "../src_objects";

				for (const lib of innerItem.jsLibraryView) {
	    			const { repository, fileName } = lib;
					const url = `https://raw.githubusercontent.com/${repository}/main/${fileName}`;
					const output = path.join(`${target}/${path.basename(fileName)}`);
					console.log(`===✅ makeFormForReader : getting ${path.basename(fileName)} in ${target} (from ${repository})`);
				 	downloadFile(url, output).catch(console.error);			
				}

				generateSupplementFileViewer(innerItem);
				//result.push(input);
			}
		});
	});
}