
// generated by makeFormForReaders.js
// include..... repository: MnovaJson-reader
// include..... jsLibrary: mnovaJsonReader.js
// work on object:nmrSpectrumObject (object == className)
// Auto-generated supplement file for className:nmrSpectrumObject
nmrSpectrumObject_DataExport(targetObjType, dataObj = {}) {
	
	const myName = "nmrSpectrumObject_DataExport"; // don't automatize in case 'use strict'
	if (targetObjType == "info") {
		return {
			uniqueHTMLcode: myName,
			elevatorMethod: myName,
			"creatorParam": {
					"editor": "djeanner",
					"version": "1",
					"source": "MnovaJson",
					"id": "none"
				},
			"object": "nmrSpectrumObject",
			"objectObj": "NMRspectrumObject",
			"type": "export",
			"title": "Mnova json spectrum",
			"outputComponents": [
				{
					"objDataField" : ["firstPoint", "values"],
					"label": "NMR file (.json)",
					"type": "json",
					"type comment" :"json binary txt"
				}
			]
		};
	}
	console.log("nmrSpectrumObject_DataExport targetObjType: ", targetObjType);
	console.log("nmrSpectrumObject_DataExport dataObj: ", dataObj);
	console.log("nmrSpectrumObject_DataExport this.obj: ", this.obj);

	// call converter...
	console.log("nmrSpectrumObject_DataExport dataObj.outputComponents[0].objDataField[0]: ", dataObj.outputComponents[0].objDataField[0]);

	let trueReturnedObjetWireFirst = {};
	if (Array.isArray(targetObjType) && targetObjType.length === 0) {
		console.log("Array is empty");
		trueReturnedObjetWireFirst["selectorOfComponents"] = "all";
	}	else {
		trueReturnedObjetWireFirst["selectorOfComponents"] = "not all";
	}


	const outputFields = dataObj.outputComponents[0].objDataField;
	outputFields.forEach(fieldName => {
        trueReturnedObjetWireFirst[fieldName] = this.obj[fieldName];
    });


	// optional escape sourceObj // cancels action 
	if ( 
		false
	) {
		const errorMessage = "Failed because ...";
		document.getElementById(
			`mergeOutput${dataObj.uniqueHTMLcode}`
		).textContent = errorMessage;
		return;
	}

	// here create object from this
	const thenmrSpectrumObject = new NMRspectrumObject([], this.obj);
	const param = {
		creatorParam : dataObj.creatorParam,
		targetObjType:targetObjType,
		outputFields:outputFields
		};
	const returedExport = thenmrSpectrumObject._saveExportedData(param);
	return returedExport;
}

nmrSpectrumObject_DataEnrichment(targetObjType, dataObj = {}) {
	const myName = "nmrSpectrumObject_DataEnrichment"; // don't automatize in case 'use strict'
	if (targetObjType == "info") {
		return {
			targetObjType: "nmrSpectrumObject",
			uniqueHTMLcode: myName,
			elevatorMethod: myName,
			"creatorParam": {
					"editor": "djeanner",
					"version": "1",
					"source": "MnovaJson",
					"id": "none"
				},
			arrayOfItems: [
				{
					type: "file",
					htmlID: "jsonSpectrum",
					comment: "NMR file (.json)",
					show: true
				}
			],
		};
	}

	var sourceObj = {};

	// Handle fields dynamically
	
	const jsonSpectrum = this.#getValOrDefault(dataObj, "jsonSpectrum");
	if (jsonSpectrum !== undefined) sourceObj["jsonSpectrum"] = jsonSpectrum;
	
	// optional escape sourceObj
	if ( 
		(sourceObj && Object.keys(sourceObj).length === 0)
					// tests input1 as field.dataPropertyName above test
					//!document.getElementById(`input1${dataObj.uniqueHTMLcode}`).dataset
					//	.content
	) {
		const errorMessage = "Failed because of missing input1";
		document.getElementById(
			`mergeOutput${dataObj.uniqueHTMLcode}`
		).textContent = errorMessage;
		return;
	}

	sourceObj["$schema"] = `https://chemedata.github.io/schema/v1/schema/${targetObjType}.json`;
	// TAKE CARE OF ORIGIN
	sourceObj["origin"] = {};///// TO DO
	const creatorParam = dataObj.creatorParam;
	// here create object, call converter...

	const thenmrSpectrumObject = new NMRspectrumObject(creatorParam, sourceObj);
	console.log("3333")
	console.log("5555")

	const targetData = {content :thenmrSpectrumObject.data};

	if ( 
		(targetData && Object.keys(targetData).length === 0)
	) {
		const errorMessage = "targetData is empty";
		document.getElementById(
			`mergeOutput${dataObj.uniqueHTMLcode}`
		).textContent = errorMessage;
		return;
	}

	const encodedContent = JSON.stringify(targetData);
	const linkUrl = `https://chemedata.github.io/schema/html/${targetData}.html#data=${encodedContent}`;

	//This dumps the json in the cell / may be too long
	//document.getElementById(`mergeOutput${dataObj.uniqueHTMLcode}`).textContent = JSON.stringify(targetData, null, 2);

	console.log("linkUrl.length",linkUrl.length)
	console.log("Valid URL?", /^[ -~]+$/.test(linkUrl));
	if (linkUrl.length > 1000) {
		localStorage.clear();
	    const storageKey = `data_${Date.now()}_${Math.floor(Math.random() * 1e6)}`;
	    localStorage.setItem(storageKey, JSON.stringify(targetData));
	    const linkUrlShort = `https://chemedata.github.io/schema/html/${encodeURIComponent(targetObjType)}.html#storageKey=${storageKey}`;
		console.log("localStorage linkUrlShort.length",linkUrlShort.length)
		console.log("Valid localStorage URL?", /^[ -~]+$/.test(linkUrlShort));
		window.open(linkUrlShort, "_blank");
	} else {
		window.open(linkUrl, "_blank");
	}
}
