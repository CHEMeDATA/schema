
import { jGraphObject } from 'html/src_objects/jGraphObject.js';
// generated by makeFormForReaders.js
// include..... repository: MnovaJson-reader
// include..... jsLibrary: mnovaJsonReader.js
// work on object:jGraphObject (object == className)
// Auto-generated supplement file for className:jGraphObject
jGraphObject_DataEnrichment(targetObjType, dataObj = {}) {
	const myName = "jGraphObject_DataEnrichment"; // don't automatize in case 'use strict'
	if (targetObjType == "info") {
			return {
				targetObjType: "jGraphObject",
				uniqueHTMLcode: myName,
				elevatorMethod: myName,
				arrayOfItems: [
					{
						type: "file",
						htmlID: "jsonSpectrum",
						comment: "NMR file (.json)",
						show: true
					},
{
						type: "file",
						htmlID: "jsonMolecule",
						comment: "molecule file (.json)",
						show: true
					}
				],
			};
	}

	var sourceObj = {
		$schema: `https://chemedata.github.io/schema/v1/schema/${targetObjType}.json`,
	};

	// Handle fields dynamically
	
	const jsonSpectrum = this.#getValOrDefault(dataObj, "jsonSpectrum");
	if (jsonSpectrum !== undefined) sourceObj["jsonSpectrum"] = jsonSpectrum;

	const jsonMolecule = this.#getValOrDefault(dataObj, "jsonMolecule");
	if (jsonMolecule !== undefined) sourceObj["jsonMolecule"] = jsonMolecule;
	// TAKE CARE OF ORIGIN
	sourceObj["origin"] = {};///// TO DO

	const creatorParam = '{"editor":"djeanner","version":"1","source":"MnovaJson","id":"none"}'; 
	// here create object, call converter...

	const thejGraphObject = new jGraphObject(creatorParam, sourceObj);

	const targetObj = thejGraphObject.obj; // ???

	const encodedContent = JSON.stringify(content);
	const linkUrl = `https://chemedata.github.io/schema/html/${targetObjType}.html#data=${encodedContent}`;

	document.getElementById(`mergeOutput${dataObj.uniqueHTMLcode}`).textContent = JSON.stringify(targetObj, null, 2);
	window.open(linkUrl, "_blank");
}

//module.exports = jGraphObject_DataEnrichment;
